apiVersion: v1
kind: ConfigMap
metadata:
  name: bithumb-producer-code
  namespace: investment-assistant
data:
  producer.py: |
    import time
    import requests
    import json
    import os
    from kafka import KafkaProducer
    import psycopg2

    class BithumbProducer:
        def __init__(self):
            self.kafka_servers = os.getenv('KAFKA_SERVERS')
            self.api_url = "https://api.bithumb.com/v1/ticker"
            self.market_codes = []
            self.producer = None
            
        def init(self):
            self.producer = KafkaProducer(
                bootstrap_servers=self.kafka_servers,
                value_serializer=lambda v: json.dumps(v).encode('utf-8'),
                key_serializer=lambda k: k.encode('utf-8')
            )
            
            conn = psycopg2.connect(
                host=os.getenv('POSTGRES_HOST'),
                database=os.getenv('POSTGRES_DB'),
                user=os.getenv('POSTGRES_USER'),
                password=os.getenv('POSTGRES_PASSWORD'),
                port=5432
            )
            with conn.cursor() as cursor:
                cursor.execute("SELECT market_code FROM market_code_bithumb")
                self.market_codes = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            print(f"Loaded {len(self.market_codes)} markets")
        
        def fetch_and_send(self, market):
            try:
                response = requests.get(self.api_url, params={"markets": market}, timeout=5)
                if response.status_code == 429:
                    print(f"Rate limit: {market}")
                    return False
                
                response.raise_for_status()
                raw_data = response.json()
                
                # 리스트 응답 처리
                if isinstance(raw_data, list):
                    if len(raw_data) > 0 and isinstance(raw_data[0], dict):
                        data = raw_data[0].copy()
                        data['source'] = 'bithumb'
                        key = f"{market}_{int(time.time() * 1000)}"
                        self.producer.send("bithumb-ticker", key=key, value=data)
                        return True
                # 딕셔너리 응답 처리        
                elif isinstance(raw_data, dict):
                    data = raw_data.copy()
                    data['source'] = 'bithumb'
                    key = f"{market}_{int(time.time() * 1000)}"
                    self.producer.send("bithumb-ticker", key=key, value=data)
                    return True
                
                return False
                
            except Exception as e:
                print(f"Error {market}: {e}")
                return False
        
        def run(self):
            self.init()
            
            cycle_count = 0
            start_time = time.time()
            
            while True:
                cycle_start = time.time()
                success_count = 0
                error_count = 0
                
                for market in self.market_codes:
                    if self.fetch_and_send(market):
                        success_count += 1
                    else:
                        error_count += 1
                
                self.producer.flush()
                
                cycle_count += 1
                cycle_time = time.time() - cycle_start
                total_time = time.time() - start_time
                current_time = time.strftime("%H:%M:%S")
                
                print(f"Cycle {cycle_count}: Success: {success_count}, Errors: {error_count}, Time: {current_time}, Duration: {cycle_time:.2f}s")

    if __name__ == "__main__":
        BithumbProducer().run()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bithumb-ticker-producer
  namespace: investment-assistant
  labels:
    app: bithumb-ticker-producer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bithumb-ticker-producer
  template:
    metadata:
      labels:
        app: bithumb-ticker-producer
    spec:
      containers:
      - name: producer
        image: python:3.11-slim
        command: ["sh", "-c"]
        args:
        - |
          pip install kafka-python requests psycopg2-binary
          python /app/producer.py
        env:
        - name: KAFKA_SERVERS
          value: "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
        - name: POSTGRES_HOST
          value: "postgresql.investment-assistant.svc.cluster.local"
        - name: POSTGRES_DB
          value: "investment_db"
        - name: POSTGRES_USER
          value: "airflow"
        - name: POSTGRES_PASSWORD
          value: "airflow123"
        volumeMounts:
        - name: producer-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command: ["pgrep", "-f", "producer.py"]
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: producer-code
        configMap:
          name: bithumb-producer-code
      restartPolicy: Always