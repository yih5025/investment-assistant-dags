apiVersion: v1
kind: ConfigMap
metadata:
  name: sp500-websocket-consumer-code
  namespace: investment-assistant
  labels:
    app: sp500-websocket-consumer
data:
  consumer.py: |
    import json
    import os
    import time
    from kafka import KafkaConsumer
    import psycopg2
    import redis
    import logging

    # 로깅 설정
    logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
    logger = logging.getLogger(__name__)

    class SP500WebSocketConsumer:
        def __init__(self):
            self.kafka_servers = os.getenv('KAFKA_SERVERS')
            self.topic = "sp500-websocket-trades"
            
            # 통계
            self.processed_count = 0
            self.error_count = 0
            self.start_time = time.time()
            
            # Redis 통계
            self.redis_success_count = 0
            self.redis_error_count = 0
            
            # API 키별 통계
            self.api_key_stats = {}
            
            logger.info("🚀 S&P 500 WebSocket Consumer 초기화")
            logger.info(f"   📡 Topic: {self.topic}")
            logger.info(f"   🔗 Kafka: {self.kafka_servers}")
            
        def get_db_connection(self):
            """PostgreSQL 연결"""
            return psycopg2.connect(
                host=os.getenv('POSTGRES_HOST'),
                database=os.getenv('POSTGRES_DB'),
                user=os.getenv('POSTGRES_USER'),
                password=os.getenv('POSTGRES_PASSWORD'),
                port=5432
            )
            
        def get_redis_connection(self):
            """Redis 연결"""
            try:
                return redis.Redis(
                    host=os.getenv('REDIS_HOST', 'redis.investment-assistant.svc.cluster.local'),
                    port=int(os.getenv('REDIS_PORT', '6379')),
                    db=int(os.getenv('REDIS_DB', '0')),
                    decode_responses=True,
                    socket_timeout=5
                )
            except Exception as e:
                logger.warning(f"⚠️ Redis 연결 실패: {e}")
                return None
        
        def store_to_redis(self, data):
            """Redis에 SP500 주식 데이터 저장"""
            try:
                redis_conn = self.get_redis_connection()
                if not redis_conn:
                    return False
                
                symbol = data.get('symbol', 'unknown')
                current_timestamp = int(time.time())
                
                # 🔑 키 구조: sp500 소스 명시 (finnhub와 구분!)
                realtime_key = f"realtime:stocks:sp500:{symbol}:{current_timestamp}"
                latest_key = f"latest:stocks:sp500:{symbol}"
                
                # Redis용 간소화된 데이터
                redis_data = {
                    'symbol': symbol,
                    'price': data.get('price'),
                    'volume': data.get('volume'),
                    'pod_index': data.get('pod_index'),
                    'timestamp': current_timestamp,
                    'source': 'sp500_websocket'
                }
                
                # 1시간 TTL로 저장
                redis_conn.setex(realtime_key, 3600, json.dumps(redis_data))
                redis_conn.setex(latest_key, 3600, json.dumps(redis_data))
                
                self.redis_success_count += 1
                return True
                
            except Exception as e:
                logger.warning(f"⚠️ Redis 저장 실패: {e}")
                self.redis_error_count += 1
                return False
        
        def safe_numeric(self, value):
            """안전한 숫자 변환"""
            if value is None or value == '':
                return None
            try:
                return float(value)
            except (ValueError, TypeError):
                return None
        
        def safe_integer(self, value):
            """안전한 정수 변환"""
            if value is None or value == '':
                return None
            try:
                return int(value)
            except (ValueError, TypeError):
                return None
        
        def insert_trade_data(self, data):
            """PostgreSQL에 S&P 500 WebSocket 거래 데이터 삽입 (기존 로직)"""
            conn = None
            try:
                conn = self.get_db_connection()
                with conn.cursor() as cursor:
                    insert_sql = '''
                        INSERT INTO sp500_websocket_trades (
                            symbol, price, volume, timestamp_ms, trade_conditions,
                            pod_index, pod_name, source, created_at
                        ) VALUES (
                            %(symbol)s, %(price)s, %(volume)s, %(timestamp_ms)s, %(trade_conditions)s,
                            %(pod_index)s, %(pod_name)s, %(source)s, NOW()
                        )
                        ON CONFLICT (symbol, timestamp_ms) DO NOTHING
                    '''
                    
                    params = {
                        'symbol': data.get('symbol'),
                        'price': self.safe_numeric(data.get('price')),
                        'volume': self.safe_integer(data.get('volume')),
                        'timestamp_ms': self.safe_integer(data.get('timestamp_ms')),
                        'trade_conditions': data.get('trade_conditions', []),
                        'pod_index': self.safe_integer(data.get('pod_index')),
                        'pod_name': data.get('pod_name'),
                        'source': data.get('source', 'finnhub_sp500_websocket')
                    }
                    
                    cursor.execute(insert_sql, params)
                    conn.commit()
                    
                    # Pod Index별 통계 업데이트
                    pod_index = self.safe_integer(data.get('pod_index'))
                    if pod_index:
                        if pod_index not in self.api_key_stats:
                            self.api_key_stats[pod_index] = {'count': 0, 'symbols': set()}
                        
                        self.api_key_stats[pod_index]['count'] += 1
                        self.api_key_stats[pod_index]['symbols'].add(params['symbol'])
                    
                    return True
                    
            except psycopg2.errors.UniqueViolation:
                if conn:
                    conn.rollback()
                return True
                
            except Exception as e:
                logger.error(f"❌ DB 삽입 실패: {e}")
                if conn:
                    conn.rollback()
                return False
                
            finally:
                if conn:
                    conn.close()
        
        def log_detailed_statistics(self):
            """상세 통계 로깅"""
            if not self.api_key_stats:
                return
                
            elapsed = time.time() - self.start_time
            overall_rate = self.processed_count / elapsed if elapsed > 0 else 0
            current_time = time.strftime("%H:%M:%S")
            
            logger.info(f"📊 === S&P 500 Consumer 상세 통계 ({current_time}) ===")
            logger.info(f"   전체: {self.processed_count}개 처리, {self.error_count}개 에러, {overall_rate:.1f}/sec")
            logger.info(f"   ⚡ Redis: 성공 {self.redis_success_count}, 실패 {self.redis_error_count}")
            
            # Pod Index별 통계
            total_symbols = set()
            for pod_index in sorted(self.api_key_stats.keys()):
                stats = self.api_key_stats[pod_index]
                count = stats['count']
                symbols = stats['symbols']
                rate = count / elapsed if elapsed > 0 else 0
                
                logger.info(f"   Pod-{pod_index}: {count}개 메시지, {len(symbols)}개 심볼, {rate:.1f}/sec")
                total_symbols.update(symbols)
            
            logger.info(f"   총 활성 심볼: {len(total_symbols)}개")
            logger.info("   " + "="*50)
        
        def run(self):
            """메인 Consumer 실행"""
            try:
                consumer = KafkaConsumer(
                    self.topic,
                    bootstrap_servers=self.kafka_servers,
                    value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                    key_deserializer=lambda m: m.decode('utf-8') if m else None,
                    group_id='sp500-websocket-consumer-group',
                    auto_offset_reset='latest',
                    enable_auto_commit=True,
                    session_timeout_ms=30000,
                    heartbeat_interval_ms=10000
                )
                
                logger.info("🔄 S&P 500 WebSocket Consumer 시작 (PostgreSQL + Redis)")
                logger.info(f"   📡 구독 Topic: {self.topic}")
                logger.info(f"   👥 Consumer Group: sp500-websocket-consumer-group")
                logger.info(f"   🗄️ PostgreSQL: {os.getenv('POSTGRES_HOST')}")
                logger.info(f"   ⚡ Redis: {os.getenv('REDIS_HOST', 'redis.investment-assistant.svc.cluster.local')}")
                
                last_stats_time = time.time()
                stats_interval = 60  # 1분마다 상세 통계
                
                for message in consumer:
                    try:
                        data = message.value
                        symbol = data.get('symbol', 'UNKNOWN')
                        price = data.get('price', 0)
                        
                        # 1. PostgreSQL 저장 (기존)
                        postgres_success = self.insert_trade_data(data)
                        
                        # 2. Redis 저장 (신규)
                        redis_success = self.store_to_redis(data)
                        
                        # 3. 통계 업데이트
                        if postgres_success:
                            self.processed_count += 1
                            
                            # 간단한 진행 상황 (100개마다)
                            if self.processed_count % 100 == 0:
                                elapsed = time.time() - self.start_time
                                rate = self.processed_count / elapsed if elapsed > 0 else 0
                                current_time = time.strftime("%H:%M:%S")
                                logger.info(f"📈 처리: {self.processed_count}, 에러: {self.error_count}, "
                                          f"시간: {current_time}, 속도: {rate:.1f}/sec")
                                logger.info(f"   💾 PostgreSQL: {self.processed_count}개 저장")
                                logger.info(f"   ⚡ Redis: 성공 {self.redis_success_count}, 실패 {self.redis_error_count}")
                                logger.info(f"   📈 최근 처리: {symbol} -> ${price}")
                            
                        else:
                            self.error_count += 1
                        
                        # 상세 통계 (1분마다)
                        current_time = time.time()
                        if current_time - last_stats_time >= stats_interval:
                            self.log_detailed_statistics()
                            last_stats_time = current_time
                            
                    except Exception as e:
                        logger.error(f"❌ 메시지 처리 오류: {e}")
                        self.error_count += 1

            except KeyboardInterrupt:
                logger.info("🛑 사용자 중단 요청")
                
            except Exception as e:
                logger.error(f"❌ Consumer 실행 오류: {e}")
                
            finally:
                # 최종 통계
                elapsed = time.time() - self.start_time
                logger.info("✅ S&P 500 WebSocket Consumer 종료")
                logger.info(f"   최종 통계: {self.processed_count}개 처리, {self.error_count}개 에러")
                logger.info(f"   실행 시간: {elapsed:.1f}초")

    if __name__ == "__main__":
        consumer = SP500WebSocketConsumer()
        consumer.run()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sp500-websocket-consumer
  namespace: investment-assistant
  labels:
    app: sp500-websocket-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sp500-websocket-consumer
  template:
    metadata:
      labels:
        app: sp500-websocket-consumer
    spec:
      containers:
      - name: websocket-consumer
        image: python:3.11-slim
        command: ["sh", "-c"]
        args:
        - |
          echo "📦 S&P 500 Consumer 패키지 설치 시작..."
          apt-get update && apt-get install -y procps
          pip install --no-cache-dir kafka-python psycopg2-binary lz4 redis
          echo "✅ 패키지 설치 완료"
          
          echo "🔍 파일 확인..."
          ls -la /app/
          
          echo "🚀 S&P 500 Consumer 실행 시작 - $(date)"
          exec python /app/consumer.py
        
        env:
        # Kafka 설정
        - name: KAFKA_SERVERS
          value: "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
          
        # PostgreSQL 설정  
        - name: POSTGRES_HOST
          value: "postgresql.investment-assistant.svc.cluster.local"
        - name: POSTGRES_DB
          value: "investment_db"
        - name: POSTGRES_USER
          value: "airflow"
        - name: POSTGRES_PASSWORD
          value: "airflow123"
          
        # Redis 설정
        - name: REDIS_HOST
          value: "redis.investment-assistant.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
          
        volumeMounts:
        - name: consumer-code
          mountPath: /app
          
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
            
        livenessProbe:
          exec:
            command: ["pgrep", "-f", "consumer.py"]
          initialDelaySeconds: 120  # 2분으로 증가 (패키지 설치 시간 고려)
          periodSeconds: 60
          failureThreshold: 3
          
        readinessProbe:
          exec:
            command: ["pgrep", "-f", "consumer.py"]
          initialDelaySeconds: 60   # 1분으로 증가
          periodSeconds: 30
          
      volumes:
      - name: consumer-code
        configMap:
          name: sp500-websocket-consumer-code
          
      restartPolicy: Always