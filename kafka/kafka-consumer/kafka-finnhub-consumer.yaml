apiVersion: v1
kind: ConfigMap
metadata:
  name: finnhub-consumer-code
  namespace: investment-assistant
data:
  consumer.py: |
    import json
    import os
    import time
    from kafka import KafkaConsumer
    import psycopg2
    import redis

    class FinnhubTradesConsumer:
        def __init__(self):
            self.kafka_servers = os.getenv('KAFKA_SERVERS')
            self.topic = "finnhub-trades"
            
            # Redis 통계
            self.redis_success_count = 0
            self.redis_error_count = 0
            
        def get_db_connection(self):
            """PostgreSQL 연결"""
            return psycopg2.connect(
                host=os.getenv('POSTGRES_HOST'),
                database=os.getenv('POSTGRES_DB'),
                user=os.getenv('POSTGRES_USER'),
                password=os.getenv('POSTGRES_PASSWORD'),
                port=5432
            )
            
        def get_redis_connection(self):
            """Redis 연결"""
            try:
                return redis.Redis(
                    host=os.getenv('REDIS_HOST', 'redis.investment-assistant.svc.cluster.local'),
                    port=int(os.getenv('REDIS_PORT', '6379')),
                    db=int(os.getenv('REDIS_DB', '0')),
                    decode_responses=True,
                    socket_timeout=5
                )
            except Exception as e:
                print(f"⚠️ Redis 연결 실패: {e}")
                return None
        
        def store_to_redis(self, data):
            """Redis에 Finnhub 주식 데이터 저장"""
            try:
                redis_conn = self.get_redis_connection()
                if not redis_conn:
                    return False
                
                symbol = data.get('symbol', 'unknown')
                current_timestamp = int(time.time())
                
                realtime_key = f"realtime:stocks:topgainers:{symbol}:{current_timestamp}"
                latest_key = f"latest:stocks:topgainers:{symbol}"
                
                # Redis용 간소화된 데이터
                redis_data = {
                    'symbol': symbol,
                    'price': data.get('price'),
                    'volume': data.get('volume'),
                    'category': data.get('category', 'unknown'),
                    'timestamp': current_timestamp,
                    'source': 'finnhub'
                }
                
                # 1시간 TTL로 저장
                redis_conn.setex(realtime_key, 3600, json.dumps(redis_data))
                redis_conn.setex(latest_key, 3600, json.dumps(redis_data))
                
                self.redis_success_count += 1
                return True
                
            except Exception as e:
                print(f"⚠️ Redis 저장 실패: {e}")
                self.redis_error_count += 1
                return False
                    
        def safe_decimal(self, value):
            """안전한 숫자 변환"""
            if value is None or value == '':
                return None
            try:
                return float(value)
            except (ValueError, TypeError):
                return None
                
        def insert_trade_data(self, data):
            """PostgreSQL에 거래 데이터 삽입 (기존 로직)"""
            conn = None
            try:
                conn = self.get_db_connection()
                with conn.cursor() as cursor:
                    insert_sql = '''
                        INSERT INTO finnhub_trades (
                            symbol, category, price, volume, timestamp_ms, 
                            trade_conditions, source, created_at
                        ) VALUES (
                            %(symbol)s, %(category)s, %(price)s, %(volume)s, %(timestamp_ms)s,
                            %(trade_conditions)s, %(source)s, NOW()
                        )
                    '''
                    
                    params = {
                        'symbol': data.get('symbol'),
                        'category': data.get('category', 'unknown'),
                        'price': self.safe_decimal(data.get('price')),
                        'volume': data.get('volume'),
                        'timestamp_ms': data.get('timestamp_ms'),
                        'trade_conditions': data.get('trade_conditions', []),
                        'source': data.get('source', 'finnhub_websocket')
                    }
                    
                    cursor.execute(insert_sql, params)
                    conn.commit()
                    
                return True
                
            except Exception as e:
                print(f"❌ PostgreSQL 저장 실패: {e}")
                if conn:
                    conn.rollback()
                return False
            finally:
                if conn:
                    conn.close()
                    
        def run(self):
            """메인 Consumer 실행"""
            consumer = KafkaConsumer(
                self.topic,
                bootstrap_servers=self.kafka_servers,
                value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                key_deserializer=lambda m: m.decode('utf-8') if m else None,
                group_id='finnhub-trades-consumer-group',
                auto_offset_reset='latest',
                enable_auto_commit=True
            )
            
            processed_count = 0
            error_count = 0
            start_time = time.time()
            
            print("🚀 Finnhub Trades Consumer 시작 (PostgreSQL + Redis)")
            print(f"   📡 Topic: {self.topic}")
            print(f"   🗄️ PostgreSQL: {os.getenv('POSTGRES_HOST')}")
            print(f"   ⚡ Redis: {os.getenv('REDIS_HOST', 'redis.investment-assistant.svc.cluster.local')}")
            
            for message in consumer:
                try:
                    data = message.value
                    symbol = data.get('symbol', 'unknown')
                    price = data.get('price', 0)
                    
                    # 1. PostgreSQL 저장 (기존)
                    postgres_success = self.insert_trade_data(data)
                    
                    # 2. Redis 저장 (신규)
                    redis_success = self.store_to_redis(data)
                    
                    # 3. 통계 업데이트
                    if postgres_success:
                        processed_count += 1
                        if processed_count % 100 == 0:
                            elapsed = time.time() - start_time
                            rate = processed_count / elapsed if elapsed > 0 else 0
                            current_time = time.strftime("%H:%M:%S")
                            print(f"📊 처리: {processed_count}, 에러: {error_count}, 시간: {current_time}, 속도: {rate:.1f}/sec")
                            print(f"   💾 PostgreSQL: {processed_count}개 저장")
                            print(f"   ⚡ Redis: 성공 {self.redis_success_count}, 실패 {self.redis_error_count}")
                            print(f"   📈 최근 처리: {symbol} -> ${price}")
                    else:
                        error_count += 1
                        
                except Exception as e:
                    print(f"❌ 메시지 처리 오류: {e}")
                    error_count += 1

    if __name__ == "__main__":
        FinnhubTradesConsumer().run()

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: finnhub-trades-consumer
  namespace: investment-assistant
  labels:
    app: finnhub-trades-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: finnhub-trades-consumer
  template:
    metadata:
      labels:
        app: finnhub-trades-consumer
    spec:
      containers:
      - name: consumer
        image: python:3.11-slim
        command: ["sh", "-c"]
        args:
        - |
          echo "📦 패키지 설치 시작..."
          apt-get update && apt-get install -y procps
          pip install --no-cache-dir kafka-python psycopg2-binary lz4 redis
          echo "✅ 패키지 설치 완료"
          
          echo "🔍 파일 확인..."
          ls -la /app/
          
          echo "🚀 Consumer 실행 시작 - $(date)"
          exec python /app/consumer.py
        
        env:
        # Kafka 설정
        - name: KAFKA_SERVERS
          value: "my-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092"
          
        # PostgreSQL 설정
        - name: POSTGRES_HOST
          value: "postgresql.investment-assistant.svc.cluster.local"
        - name: POSTGRES_DB
          value: "investment_db"
        - name: POSTGRES_USER
          value: "airflow"
        - name: POSTGRES_PASSWORD
          value: "airflow123"
          
        # Redis 설정
        - name: REDIS_HOST
          value: "redis.investment-assistant.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_DB
          value: "0"
          
        volumeMounts:
        - name: consumer-code
          mountPath: /app
          
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
            
        livenessProbe:
          exec:
            command: ["pgrep", "-f", "consumer.py"]
          initialDelaySeconds: 120  # 2분으로 증가
          periodSeconds: 30
          
        readinessProbe:
          exec:
            command: ["pgrep", "-f", "consumer.py"]
          initialDelaySeconds: 60   # 1분으로 증가
          periodSeconds: 30
          
      volumes:
      - name: consumer-code
        configMap:
          name: finnhub-consumer-code
          
      restartPolicy: Always